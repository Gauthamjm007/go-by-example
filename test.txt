Execute a docker container - docker exec -it pgacid psql -U postgres
Count all the rows in the DB - select count(*) from temp;
Sequential scan in postgres - explain select * from row_name;
Sequential scan with sort - explain select * from row_name order by field_name;
Index Scan - explain select * from grades where id=10;
Index Scan by field_name - explain select field_name from row_name where id=10;


Create Table - 

create table school( name varchar(10), grade varchar(2),age integer, joindate date )

Generate random string to a table - 
 Insert into grades(g) select md5(random()::text) from generate_series(0,1000000);
Generate random string of fixed length to a table - 
 Insert into grades(g) select substr(md5(random()::text), 1, 2) from generate_series(0,1000000);

 INSERT INTO school (name,grade,age,joindate)
SELECT substr(md5(random()::text), 1, 10),substr(md5(random()::text), 1, 2),
       (random() * 70 + 10)::integer,
       DATE '2021-01-01' + (random() * 700)::integer
FROM generate_series(0, 1000000);

Create Index in postgres :

create index on school(grade);



Key vs Non Key Column

Get Size of all SQL Data Table - select pg_relation_size(oid)/(1000*1000) || 'MB',relname from pg_class order by pg_relation_size(oid) desc;
Create Index for grade but include Name field -  create index school_grade_idx on school(grade) include (name);
After including name to search name using index - explain analyze select name from school where grade='88';

Index Scan vs Index Only Scan 


Crate index based on ID - create index id_idx on school(id);
Example for Index Scan -  explain analyze select name from school  where id=7;
Example for Index only Scan - explain analyze select id from school  where id=7;

//Combine Database Indexes for better performance

create a table - create table combinedb(a int,b int,c int);
insert data - insert into combinedb(a,b,c) select (random()*1000)::integer, (random()*1000)::integer,(random()*1000)::integer from generate_series(0,1000000);
crate index - create index on combinedb(a); create index on combinedb(b);
for bit map index scan - explain analyze select c from combinedb where a = 70;
for index only scan -  explain analyze select c from combinedb where a = 70 limit 2;
composite index , combine index of both a and b -  create index on combinedb(a,b);
Parallel Seq Scan - when combine index if you query for only a or b - if won't use a and b combined index - explain analyze select c from combinedb where b=300;
create concurrent inde - create index concurrently grade_idx on school(grade);


Bloom Filter - 


